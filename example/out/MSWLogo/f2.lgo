;Code generated for MSWLogo

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Basic Functions                                                       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to dot_product :ux :uy :vx :vy
    output arccos (:ux*:vx+:uy*:vy)/((sqrt :ux*:ux+:uy*:uy)*(sqrt :vx*:vx+:vy*:vy))
end


;draws a cubic bezier curve from current point to (x, y)
;@param x1, y1 are the first control point
;@param x2, y2 are the second control point
;@param n is the number of points
to cubic_bezier :x1 :y1 :x2 :y2 :x :y :n

    make "dt (1.0/(:n-1))

    for [i 0 :n 1] [
        make "t :i*:dt

        ;calculating coefficients
        make "cx 3.0*(:x1-(first pos))
        make "bx 3.0*(:x2-:x1)-:cx
        make "ax :x-(first pos)-:cx-:bx

        make "cy 3.0*(:y1-(last pos))
        make "by 3.0*(:y2-:y1)-:cy
        make "ay :y-(last pos)-:cy-:by

        make "rx :ax*:t*:t*:t+:bx*:t*:t+:cx*:t+(first pos)
        make "ry :ay*:t*:t*:t+:by*:t*:t+:cy*:t+(last pos)

        ;goto new point
        setxy :rx :ry

        ;save the second control point
        make "lx1 :x2
        make "ly1 :y2
    ]
end


;draws an arc
;@param (cx, cy) is the center
;@param rx radius x
;@param ry radius y
;@param rt is the angle from the x-axis of the current coordinate system to the x-axis of the ellipse
;@param o which is the start angle of the elliptical arc prior to the stretch and rotate operations
;@param do is the difference between the initial and final angle
;see also http://www.w3.org/TR/SVG/implnote.html#ArcParameterizationAlternatives
to draw_arc :cx :cy :rx :ry :rt :o :do

    ;make angle positive and less or equal than 360
    make "o (remainder (int :o) 360)

    if :o<0 [
        make "o :o+360
    ]

    ;set turning sense
    ifelse :do<0 [
        make "i -1
    ] [
        make "i 1
    ]

    ;draw arc
    for [a :o :o+:do :i] [
        ;calculate point
        make "px (cos :rt)*:rx*(cos :a)-(sin :rt)*:ry*(sin :a)+:cx
        make "py (sin :rt)*:rx*(cos :a)+(cos :rt)*:ry*(sin :a)+:cy

        ;goto the point
        setxy :px :py
    ]

end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;SVG Functions                                                         ;
;http://www.w3.org/TR/SVG/paths.html                                   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to absolute_moveto :x :y
  penup
  setxy :x :y
  pendown
  make "x0 (first pos)
  make "y0 (last pos)
end


to relative_moveto :x :y
  absolute_moveto :x+(first pos) :y+(last pos)
end


to closepath
  setxy :x0 :y0
end


to absolute_horizontal_lineto :x
  setx :x
end


to relative_horizontal_lineto :x
  absolute_horizontal_lineto :x+(first pos)
end


to absolute_vertical_lineto :y
  sety :y
end


to relative_vertical_lineto :y
  absolute_vertical_lineto :y+(last pos)
end


to absolute_lineto :x :y
  setxy :x :y
end


to relative_lineto :x :y
  absolute_lineto :x+(first pos) :y+(last pos)
end


to absolute_cubic_bezier :x1 :y1 :x2 :y2 :x :y
    ;n=1000 to ensure that the curve is smooth
    cubic_bezier :x1 :y1 :x2 :y2 :x :y 1000
end


to relative_cubic_bezier :x1 :y1 :x2 :y2 :x :y
    absolute_cubic_bezier :x1+(first pos) :y1+(last pos) :x2+(first pos) :y2+(last pos) :x+(first pos) :y+(last pos)
end


to absolute_smooth_cubic_bezier :x2 :y2 :x :y
    absolute_cubic_bezier (2*(first pos)-(:lx1)) (2*(last pos)-(:ly1)) :x2 :y2 :x :y
end


to relative_smooth_cubic_bezier :x2 :y2 :x :y
    absolute_cubic_bezier (2*(first pos)-(:lx1)) (2*(last pos)-(:ly1)) :x2+(first pos) :y2+(last pos) :x+(first pos) :y+(last pos)
end


to absolute_quadratic_bezier :x1 :y1 :x :y
    ;quadratic bezier expressed as cubic bezier
    ;http://fontforge.github.io/bezier.html
    ;see also "Converting TrueType to PostScript"
	absolute_cubic_bezier (first pos)+(:x1-(first pos))*2/3 (last pos)+(:y1-(last pos))*2/3 :x+(:x1-:x)*2/3 :y+(:y1-:y)*2/3 :x :y
end


to relative_quadratic_bezier :x1 :y1 :x2 :y2 :x :y
    absolute_quadratic_bezier :x1+(first pos) :y1+(last pos) :x2+(first pos) :y2+(last pos) :x+(first pos) :y+(last pos)
end


to absolute_smooth_quadratic_bezier :x :y
    absolute_quadratic_bezier (2*(first pos)-(:lx1)) (2*(last pos)-(:ly1)) :x :y
end


to relative_smooth_quadratic_bezier :x :y
    absolute_quadratic_bezier (2*(first pos)-(:lx1)) (2*(last pos)-(:ly1)) :x+(first pos) :y+(last pos)
end


;see also http://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter
to absolute_arc :rx :ry :rt :fa :fs :x2 :y2

    ;auxiliar calcs
    make "rt (remainder (int :rt) 360)
    make "x1 (first pos)
    make "y1 (last pos)
    make "tx1 (cos :rt)*(:x1-:x2)/2+(sin :rt)*(:y1-:y2)/2
    make "ty1 -(sin :rt)*(:x1-:x2)/2+(cos :rt)*(:y1-:y2)/2
    
    
    ;Correction of out-of-range rx and ry
    make "rx (abs :rx)
    make "ry (abs :ry)
    make "d (sqrt (:tx1*:tx1/(:rx*:rx)+:ty1*:ty1/(:ry*:ry)))
    make "rx :d*:rx
    make "ry :d*:ry

    ;auxiliar calcs    
    make "sq (sqrt abs (((:rx*:rx*:ry*:ry-:rx*:rx*:ty1*:ty1-:ry*:ry*:tx1*:tx1)/(:rx*:rx*:ty1*:ty1+:ry*:ry*:tx1*:tx1))))
    if :fa=:fs [
        make "sq -:sq
    ]    
    make "tcx :sq*:rx*:ty1/:ry
    make "tcy :sq*-:ry*:tx1/:rx

    ;calculating coefficients
    make "cx (cos :rt)*:tcx-(sin :rt)*:tcy+(:x1+:x2)/2
    make "cy (sin :rt)*:tcx+(cos :rt)*:tcy+(:y1+:y2)/2
    make "o dot_product 1 0 (:tx1-:tcx)/:rx (:ty1-:tcy)/:ry
    make "do (remainder (int (dot_product (:tx1-:tcx)/:rx (:ty1-:tcy)/:ry (-:tx1-:tcx)/:rx (-:ty1-:tcy)/:ry)) 360)

    ;draw
    draw_arc :cx :cy :rx :ry :rt -:o -:do
end


to relative_arc :rx :ry :rt :fa :fs :x2 :y2 
    absolute_arc :rx :ry :rt :fa :fs (first pos)+:x2 (last pos)+:y2
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Draw                                                                  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

absolute_moveto 53.6952 -71.4456
absolute_horizontal_lineto 20.4405
relative_cubic_bezier -2.0709 -0.0 -3.75 -1.6791 -3.75 -3.75
relative_cubic_bezier 0.0 -11.2362 9.1413 -20.3775 20.3775 -20.3775
relative_smooth_cubic_bezier 20.3775 9.1413 20.3775 20.3775
absolute_cubic_bezier 57.4452 -73.1247 55.7664 -71.4456 53.6952 -71.4456
closepath
absolute_moveto 37.068 -88.0731
relative_cubic_bezier -5.7969 -0.0 -10.7115 3.8499 -12.3207 9.1275
relative_horizontal_lineto 24.6414
absolute_cubic_bezier 47.7795 -84.2232 42.8649 -88.0731 37.068 -88.0731
closepath
absolute_moveto 133.1595 -71.4456
relative_horizontal_lineto -33.255
relative_cubic_bezier -2.0709 -0.0 -3.75 -1.6791 -3.75 -3.75
relative_cubic_bezier 0.0 -11.2362 9.1413 -20.3775 20.3775 -20.3775
relative_smooth_cubic_bezier 20.3775 9.1413 20.3775 20.3775
absolute_cubic_bezier 136.9095 -73.1247 135.2307 -71.4456 133.1595 -71.4456
closepath
absolute_moveto 116.532 -88.0731
relative_cubic_bezier -5.7969 -0.0 -10.7115 3.8499 -12.3207 9.1275
relative_horizontal_lineto 24.6414
absolute_cubic_bezier 127.2438 -84.2232 122.3292 -88.0731 116.532 -88.0731
closepath
absolute_moveto 89.1744 -117.7164
absolute_horizontal_lineto 80.55
absolute_vertical_lineto -44.3052
relative_cubic_bezier 3.3345 0.3984 7.1604 1.2144 11.1471 2.0667
relative_cubic_bezier 4.6056 0.9843 9.3678 2.0022 13.3674 2.3565
relative_cubic_bezier 5.0598 0.4482 6.7053 -0.3927 7.1778 -0.7749
relative_cubic_bezier 0.1278 -0.1035 0.3921 -0.3189 0.4926 -1.0281
relative_lineto -7.1241 -23.7339
relative_cubic_bezier -0.5955 -1.9836 0.5301 -4.0743 2.5134 -4.6698
relative_cubic_bezier 1.9836 -0.5946 4.0746 0.5301 4.6698 2.5137
relative_lineto 3.7311 12.4296
relative_lineto 3.7311 -12.4296
relative_cubic_bezier 0.4875 -1.6242 1.9773 -2.6727 3.5901 -2.6727
relative_cubic_bezier 0.357 -0.0 0.72 0.0513 1.0797 0.159
relative_cubic_bezier 1.9836 0.5955 3.1089 2.6862 2.5134 4.6698
relative_lineto -7.1973 23.9781
relative_cubic_bezier -0.2409 3.4374 -1.8846 5.484 -3.2829 6.6153
relative_cubic_bezier -5.5311 4.4736 -15.8763 2.2626 -26.8296 -0.0789
relative_cubic_bezier -3.4563 -0.7389 -6.7821 -1.4484 -9.5796 -1.8405
relative_vertical_lineto 4.611
relative_cubic_bezier 0.0 2.0709 -1.6791 3.75 -3.75 3.75
relative_smooth_cubic_bezier -3.75 -1.6791 -3.75 -3.75
relative_vertical_lineto -4.611
relative_cubic_bezier -2.7972 0.3921 -6.123 1.1016 -9.5796 1.8405
relative_cubic_bezier -10.953 2.3415 -21.2988 4.5519 -26.8296 0.0789
relative_cubic_bezier -1.3983 -1.1313 -3.042 -3.1779 -3.2829 -6.6153
relative_lineto -7.1973 -23.9781
relative_cubic_bezier -0.5955 -1.9836 0.5301 -4.0743 2.5134 -4.6698
relative_cubic_bezier 1.9836 -0.5946 4.0743 0.5301 4.6698 2.5137
relative_lineto 3.7311 12.4296
relative_lineto 3.7311 -12.4296
relative_cubic_bezier 0.4875 -1.6242 1.9773 -2.6727 3.5901 -2.6727
relative_cubic_bezier 0.357 -0.0 0.72 0.0513 1.0797 0.159
relative_cubic_bezier 1.9836 0.5955 3.1089 2.6862 2.5134 4.6698
relative_lineto -7.1241 23.7339
relative_cubic_bezier 0.1002 0.7089 0.3648 0.9246 0.4926 1.0281
relative_cubic_bezier 0.4728 0.3822 2.1183 1.2231 7.1778 0.7749
relative_cubic_bezier 3.9996 -0.3546 8.7621 -1.3722 13.3674 -2.3565
relative_cubic_bezier 3.9867 -0.8523 7.8126 -1.6683 11.1471 -2.0667
relative_vertical_lineto -73.4112
relative_horizontal_lineto -8.6244
relative_cubic_bezier -2.0712 -0.0 -3.75 -1.6791 -3.75 -3.75
relative_smooth_cubic_bezier 1.6788 -3.75 3.75 -3.75
relative_horizontal_lineto 24.7488
relative_cubic_bezier 2.0712 -0.0 3.75 1.6791 3.75 3.75
absolute_smooth_cubic_bezier 91.2456 -117.7164 89.1744 -117.7164
closepath
